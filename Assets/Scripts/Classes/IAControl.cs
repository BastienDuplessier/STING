//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.34014
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;

namespace AssemblyCSharp
{
	public class IAControl : Control {
		GameObject gameObject;

		// Decisions
		private bool goRight = false;
		private bool goLeft = false;
		private bool speedUp = false;
		private bool slowDown = false;

		public IAControl (Movement parent, GameObject gameObject) : base (parent) {
			this.parent = parent;
			this.gameObject = gameObject;
		}

		public override bool TurningRight() {
			return goRight;
		}

		public override bool TurningLeft() {
			return goLeft;
		}

		public override bool Accelerating() {
			return speedUp;
		}

		public override bool Slowing() {
			return slowDown;
		}

		public override void Update() {
			UpdateDecision(parent.speed);
		}

		public void UpdateDecision(float speed) {
			goRight = false;
			goLeft = false;
			var fwd = gameObject.transform.TransformDirection (Vector3.forward);
			var right = gameObject.transform.TransformDirection (Vector3.right);
			var left = gameObject.transform.TransformDirection (Vector3.left);
			if (Physics.Raycast (gameObject.transform.position, fwd, speed * 1.5F)) {
				bool canGoRight = !Physics.Raycast (gameObject.transform.position, right, speed);
				bool canGoLeft = !Physics.Raycast (gameObject.transform.position, left, speed);

				if(canGoLeft && canGoRight) {
					int rand = (new System.Random()).Next(0, 30);
					if(rand < 10)
						goLeft = true;
					else if (rand > 20)
						goRight = true;
				} else if (canGoLeft) {
					goLeft = true;
				} else if (canGoRight) {
					goRight = true;
				}

			}
		}
	}
}
